{"version":3,"file":"static/js/961.f61dcfec.chunk.js","mappings":"8MAIA,MAgEA,EAhEqBA,KAAO,IAADC,EAAAC,EACzB,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KACjC,GAAEC,IAAOC,EAAAA,EAAAA,MAETC,EAA2B,QAAvBP,EAAiB,QAAjBC,GADOO,EAAAA,EAAAA,MACKC,aAAK,IAAAR,OAAA,EAAdA,EAAgBM,YAAI,IAAAP,EAAAA,EAAI,KAG7BU,KAAMC,EAAO,MAAEC,IAAUC,EAAAA,EAAAA,IAAgBR,GAUjD,IARAS,EAAAA,EAAAA,YAAU,KACJF,EACFG,QAAQH,MAAM,yCAA0CA,GAExDT,EAAWQ,EACb,GACC,CAACA,EAASC,KAERV,EAAS,OAAO,KAErB,MAAM,MAAEc,EAAK,YAAEC,EAAW,aAAEC,EAAY,aAAEC,EAAY,SAAEC,EAAQ,OAAEC,GAChEnB,EACIoB,GAAeJ,GAAgB,IAAIK,MAAM,EAAG,GAC5CC,EAAQC,KAAKC,MAAqB,GAAfP,GAEzB,OACEQ,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQF,UACnBC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACC,GAAIzB,EAAKqB,SAAC,eAElBD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGX,IAAeY,EAAAA,EAAAA,KAAA,OAAKI,IAAG,GAAAC,OAzBd,mCAyB0BA,OAAGjB,GAAekB,IAAKnB,KAC3DW,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CACGZ,EAAM,KAAGM,EAAY,QAExBK,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBACWD,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAOJ,EAAM,WAE3BK,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAIR,KACJS,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAIP,GAAUA,EAAOe,KAAIC,GAASA,EAAMC,OAAMC,KAAK,SACnDV,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4BACJD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACC,GAAG,OAAOvB,MAAO,CAAEF,QAAOqB,SAAC,YAInCC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACC,GAAG,UAAUvB,MAAO,CAAEF,QAAOqB,SAAC,wBAO5CC,EAAAA,EAAAA,KAACW,EAAAA,SAAQ,CAACC,UAAUZ,EAAAA,EAAAA,KAAA,OAAAD,SAAK,eAAiBA,UACxCC,EAAAA,EAAAA,KAACa,EAAAA,GAAM,QAEL,C,wDC9DVC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,MAEaC,EAAYC,MAAOC,EAAKC,KACnC,IAEE,aADuBJ,EAAAA,EAAAA,IAAUG,EAAK,CAAEC,OAAQ,IAAKA,EAAQC,QAJjD,uCAKItC,IAIlB,CAHE,MAAOE,GAEP,MADAG,QAAQH,MAAM,4BAADsB,OAA6BY,EAAG,KAAKlC,GAC5C,IAAIqC,MAAM,uBAClB,GAWWpC,EAAmBR,GACvBuC,EAAU,SAADV,OAAU7B,G","sources":["pages/MovieDetails/MovieDetails.jsx","services/http-requests.js"],"sourcesContent":["import { useEffect, useState, Suspense } from 'react';\nimport { useLocation, useParams, Outlet, Link } from 'react-router-dom';\nimport { useMovieDetails } from '../../services/http-requests';\n\nconst MovieDetails = () => {\n  const [details, setDetails] = useState([]);\n  const { id } = useParams();\n  const location = useLocation();\n  const from = location.state?.from ?? '/';\n  const baseURL = 'https://image.tmdb.org/t/p/w400';\n\n  const { data: results, error } = useMovieDetails(id);\n\n  useEffect(() => {\n    if (error) {\n      console.error('Something went wrong, please try again', error);\n    } else {\n      setDetails(results);\n    }\n  }, [results, error]);\n\n  if (!details) return null;\n\n  const { title, poster_path, release_date, vote_average, overview, genres } =\n    details;\n  const releaseYear = (release_date || '').slice(0, 4);\n  const score = Math.round(vote_average * 10);\n\n  return (\n    <div>\n      <button type=\"button\">\n        <Link to={from}>Go back</Link>\n      </button>\n      <div>\n        {poster_path && <img src={`${baseURL}${poster_path}`} alt={title} />}\n        <div>\n          <h1>\n            {title} ({releaseYear})\n          </h1>\n          <p>\n            User Score: <span>{score}%</span>\n          </p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h2>Genres</h2>\n          <p>{genres && genres.map(genre => genre.name).join(', ')}</p>\n          <h2>Additional Information</h2>\n          <ul>\n            <li>\n              <Link to=\"cast\" state={{ from }}>\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link to=\"reviews\" state={{ from }}>\n                Reviews\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '6167a2fbe619d64566c427d4bc6ed1cb';\n\nexport const fetchData = async (url, params) => {\n  try {\n    const response = await axios.get(url, { params: { ...params, api_key: API_KEY } });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching data from ${url}:`, error);\n    throw new Error('Failed to fetch data');\n  }\n};\n\nexport const useTrendingMovies = () => {\n  return fetchData('trending/movie/day');\n};\n\nexport const useSearchMovies = (query) => {\n  return fetchData('search/movie', { params: { query } });\n};\n\nexport const useMovieDetails = (id) => {\n  return fetchData(`movie/${id}`);\n};\n\nexport const useMovieCredits = (id) => {\n  return fetchData(`movie/${id}/credits`);\n};\n\nexport const useMovieReviews = (id) => {\n  return fetchData(`movie/${id}/reviews`);\n};\n"],"names":["MovieDetails","_location$state$from","_location$state","details","setDetails","useState","id","useParams","from","useLocation","state","data","results","error","useMovieDetails","useEffect","console","title","poster_path","release_date","vote_average","overview","genres","releaseYear","slice","score","Math","round","_jsxs","children","_jsx","type","Link","to","src","concat","alt","map","genre","name","join","Suspense","fallback","Outlet","axios","fetchData","async","url","params","api_key","Error"],"sourceRoot":""}