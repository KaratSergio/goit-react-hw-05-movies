{"version":3,"file":"static/js/634.dce637be.chunk.js","mappings":"iSAEO,MAAMA,EAAYC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qKAUtBC,EAAcH,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,kEAMxBG,EAAQL,EAAAA,GAAAA,EAAQM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,sE,aCf7B,MASA,EATqBK,KAEjBC,EAAAA,EAAAA,MAACT,EAAS,CAAAU,SAAA,EACRC,EAAAA,EAAAA,KAACP,EAAW,CAACQ,IAAKC,EAASC,IAAI,cAC/BH,EAAAA,EAAAA,KAACL,EAAK,CAAAI,SAAC,gB,gBCLN,MAAMK,EAAgBd,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mFAO1Ba,EAAYf,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,+BAItBc,EAAQhB,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,sHAQlBe,EAAYjB,EAAAA,GAAAA,EAAQkB,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,0BAIpBiB,EAAYnB,EAAAA,GAAAA,EAAQoB,IAAAA,GAAAlB,EAAAA,EAAAA,GAAA,sEAMpBmB,EAAYrB,EAAAA,GAAAA,EAAQsB,IAAAA,GAAApB,EAAAA,EAAAA,GAAA,6FChBpBqB,EAAOA,KAClB,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KACjC,GAAEC,IAAOC,EAAAA,EAAAA,MAgBf,OAbAC,EAAAA,EAAAA,YAAU,KACkBC,WACxB,IACE,MAAQC,KAAMC,SAAkBC,EAAAA,GAAc,SAADC,OAAUP,EAAE,aACzDF,EAAWO,EAGb,CAFE,MAAOG,GACPC,QAAQD,MAAM,yCAA0CA,EAC1D,GAGFE,EAAmB,GAClB,CAACV,IAECH,GAA8B,IAAnBA,EAAQc,QASpB5B,EAAAA,EAAAA,KAACI,EAAa,CAAAL,SACXe,EAAQe,KAAIC,IAA4C,IAA3C,aAAEC,EAAY,KAAEC,EAAI,UAAEC,EAAS,GAAEhB,GAAIa,EACjD,OACEhC,EAAAA,EAAAA,MAACO,EAAS,CAAAN,SAAA,CACPgC,GACC/B,EAAAA,EAAAA,KAACM,EAAK,CAACL,IAAG,GAAAuB,OA7BR,mCA6BoBA,OAAGO,GAAgB5B,IAAK6B,KAE9ChC,EAAAA,EAAAA,KAACH,EAAY,KAEfC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACO,EAAS,CAAAR,SAAEiC,KACZlC,EAAAA,EAAAA,MAACW,EAAS,CAAAV,SAAA,CAAC,SAAOkC,UARNhB,EAUJ,OApBlBjB,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACW,EAAS,CAAAZ,SAAC,2CAsBG,EAetB,G,+CCvEAmC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,MAEaC,EAAYf,MAAOgB,EAAKC,KACnC,IAEE,aADuBH,EAAAA,EAAAA,IAAUE,EAAK,CAAEC,OAAQ,IAAKA,EAAQC,QAJjD,uCAKIC,IAIlB,CAHE,MAAOd,GAEP,MADAC,QAAQD,MAAM,4BAADD,OAA6BY,EAAG,KAAKX,GAC5C,IAAIe,MAAM,uBAClB,E","sources":["components/Cast/DefaultPhoto/DefaultPhoto.styled.js","components/Cast/DefaultPhoto/DefaultPhoto.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/http-requests.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 150px;\n  height: 220px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  border: 3px solid #fff;\n  margin-bottom: 10px;\n`;\n\nexport const StyledImage = styled.img`\n  margin-top: 20px;\n  width: 120px;\n  height: 125px;\n`;\n\nexport const Title = styled.p`\n  font-size: 24px;\n  color: #ecdede;\n  margin-top: 15px;\n`;\n","import noPhoto from '../../../images/no-photo.png';\nimport { Container, StyledImage, Title } from './DefaultPhoto.styled';\n\nconst DefaultPhoto = () => {\n  return (\n    <Container>\n      <StyledImage src={noPhoto} alt=\"No Photo\" />\n      <Title>No Photo</Title>\n    </Container>\n  );\n};\n\nexport default DefaultPhoto;\n","import styled from 'styled-components';\n\nexport const CastContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 35px;\n  margin-top: 36px;\n`;\n\nexport const ActorCard = styled.div`\n  max-width: 150px;\n`;\n\nexport const Photo = styled.img`\n  width: 150px;\n  height: 220px;\n  object-fit: cover;\n  margin-bottom: 10px;\n  border: 3px solid #fff;\n`;\n\nexport const ActorName = styled.p`\n  color: #fff;\n`;\n\nexport const ActorRole = styled.p`\n  color: #74b6c5;\n  font-size: 14px;\n  padding-top: 5px;\n`;\n\nexport const ErrorText = styled.p`\n  color: #74b6c5;\n  font-size: 34px;\n  margin-top: 20px;\n  text-align: center;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as API from '../../services/http-requests';\nimport DefaultPhoto from './DefaultPhoto/DefaultPhoto';\n\nimport {\n  CastContainer,\n  Photo,\n  ActorCard,\n  ActorName,\n  ActorRole,\n  ErrorText,\n} from './Cast.styled';\n\nexport const Cast = () => {\n  const [credits, setCredits] = useState([]);\n  const { id } = useParams();\n  const baseURL = 'https://image.tmdb.org/t/p/w200';\n\n  useEffect(() => {\n    const fetchMovieCredits = async () => {\n      try {\n        const { cast: results } = await API.fetchData(`movie/${id}/credits`);\n        setCredits(results);\n      } catch (error) {\n        console.error('Something went wrong, please try again', error);\n      }\n    };\n\n    fetchMovieCredits();\n  }, [id]);\n\n  if (!credits || credits.length === 0) {\n    return (\n      <div>\n        <ErrorText>No credits information for this movie</ErrorText>\n      </div>\n    );\n  }\n\n  return (\n      <CastContainer>\n        {credits.map(({ profile_path, name, character, id }) => {\n          return (\n            <ActorCard key={id}>\n              {profile_path ? (\n                <Photo src={`${baseURL}${profile_path}`} alt={name} />\n              ) : (\n                <DefaultPhoto />\n              )}\n              <div>\n                <ActorName>{name}</ActorName>\n                <ActorRole>Role: {character}</ActorRole>\n              </div>\n            </ActorCard>\n          );\n        })}\n      </CastContainer>\n  );\n};\n\nCast.propTypes = {\n  credits: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '6167a2fbe619d64566c427d4bc6ed1cb';\n\nexport const fetchData = async (url, params) => {\n  try {\n    const response = await axios.get(url, { params: { ...params, api_key: API_KEY } });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching data from ${url}:`, error);\n    throw new Error('Failed to fetch data');\n  }\n};\n\nexport const useTrendingMovies = () => {\n  return fetchData('trending/movie/day');\n};\n\nexport const useSearchMovies = (query) => {\n  return fetchData('search/movie', { params: { query } });\n};\n\nexport const useMovieDetails = (id) => {\n  return fetchData(`movie/${id}`);\n};\n\nexport const useMovieCredits = (id) => {\n  return fetchData(`movie/${id}/credits`);\n};\n\nexport const useMovieReviews = (id) => {\n  return fetchData(`movie/${id}/reviews`);\n};\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","StyledImage","_templateObject2","Title","_templateObject3","DefaultPhoto","_jsxs","children","_jsx","src","noPhoto","alt","CastContainer","ActorCard","Photo","ActorName","_templateObject4","ActorRole","_templateObject5","ErrorText","_templateObject6","Cast","credits","setCredits","useState","id","useParams","useEffect","async","cast","results","API","concat","error","console","fetchMovieCredits","length","map","_ref","profile_path","name","character","axios","fetchData","url","params","api_key","data","Error"],"sourceRoot":""}