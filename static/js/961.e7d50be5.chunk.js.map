{"version":3,"file":"static/js/961.e7d50be5.chunk.js","mappings":"iOAIO,MAAMA,EAAeA,KAAO,IAADC,EAAAC,EAChC,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,OACjC,GAAEC,IAAOC,EAAAA,EAAAA,MAETC,EAA2B,QAAvBP,EAAiB,QAAjBC,GADOO,EAAAA,EAAAA,MACKC,aAAK,IAAAR,OAAA,EAAdA,EAAgBM,YAAI,IAAAP,EAAAA,EAAI,IAgBrC,IAbAU,EAAAA,EAAAA,YAAU,KACkBC,WACxB,IACE,MAAMC,QAAgBC,EAAAA,EAAAA,IAAU,SAADC,OAAUT,IACzCF,EAAWS,EAGb,CAFE,MAAOG,GACPC,QAAQD,MAAM,yCAA0CA,EAC1D,GAGFE,EAAmB,GAClB,CAACZ,KAECH,EAAS,OAAO,KAErB,MAAM,MAAEgB,EAAK,YAAEC,EAAW,aAAEC,EAAY,aAAEC,EAAY,SAAEC,EAAQ,OAAEC,GAAWrB,EACvEsB,GAAeJ,GAAgB,IAAIK,MAAM,EAAG,GAC5CC,EAASC,MAAMN,GAAgD,EAAhCO,KAAKC,MAAqB,GAAfR,GAEhD,OACES,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQF,UACnBC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACC,GAAI5B,EAAKwB,SAAC,eAElBD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGZ,IAAea,EAAAA,EAAAA,KAAA,OAAKI,IAAG,GAAAtB,OA3Bd,mCA2B0BA,OAAGK,GAAekB,IAAKnB,KAC3DY,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CACGb,EAAM,KAAGM,EAAY,QAExBM,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBACWD,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAOL,EAAM,WAE3BM,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAIT,KACJU,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAIR,GAAUA,EAAOe,KAAKC,GAAUA,EAAMC,OAAMC,KAAK,SACrDT,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4BACJD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACC,GAAG,OAAO1B,MAAO,CAAEF,QAAOwB,SAAC,YAInCC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACC,GAAG,UAAU1B,MAAO,CAAEF,QAAOwB,SAAC,wBAO5CC,EAAAA,EAAAA,KAACU,EAAAA,SAAQ,CAACC,UAAUX,EAAAA,EAAAA,KAAA,OAAAD,SAAK,eAAiBA,UACxCC,EAAAA,EAAAA,KAACY,EAAAA,GAAM,QAEL,EAIV,G,+CCpEAC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,MAEahC,EAAYF,MAAOmC,EAAKC,KACnC,IAEE,aADuBF,EAAAA,EAAAA,IAAUC,EAAK,CAAEC,OAAQ,IAAKA,EAAQC,QAJjD,uCAKIC,IAIlB,CAHE,MAAOlC,GAEP,MADAC,QAAQD,MAAM,4BAADD,OAA6BgC,EAAG,KAAK/B,GAC5C,IAAImC,MAAM,uBAClB,E","sources":["pages/MovieDetails/MovieDetails.jsx","services/http-requests.js"],"sourcesContent":["import { useEffect, useState, Suspense } from 'react';\nimport { useLocation, useParams, Outlet, Link } from 'react-router-dom';\nimport { fetchData } from '../../services/http-requests';\n\nexport const MovieDetails = () => {\n  const [details, setDetails] = useState(null);\n  const { id } = useParams();\n  const location = useLocation();\n  const from = location.state?.from ?? '/';\n  const baseURL = 'https://image.tmdb.org/t/p/w400';\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const results = await fetchData(`movie/${id}`);\n        setDetails(results);\n      } catch (error) {\n        console.error('Something went wrong, please try again', error);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [id]);\n\n  if (!details) return null;\n\n  const { title, poster_path, release_date, vote_average, overview, genres } = details;\n  const releaseYear = (release_date || '').slice(0, 4);\n  const score = !isNaN(vote_average) ? Math.round(vote_average * 10) : 0;\n\n  return (\n    <div>\n      <button type=\"button\">\n        <Link to={from}>Go back</Link>\n      </button>\n      <div>\n        {poster_path && <img src={`${baseURL}${poster_path}`} alt={title} />}\n        <div>\n          <h1>\n            {title} ({releaseYear})\n          </h1>\n          <p>\n            User Score: <span>{score}%</span>\n          </p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h2>Genres</h2>\n          <p>{genres && genres.map((genre) => genre.name).join(', ')}</p>\n          <h2>Additional Information</h2>\n          <ul>\n            <li>\n              <Link to=\"cast\" state={{ from }}>\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link to=\"reviews\" state={{ from }}>\n                Reviews\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\n\nexport default MovieDetails;\n\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '6167a2fbe619d64566c427d4bc6ed1cb';\n\nexport const fetchData = async (url, params) => {\n  try {\n    const response = await axios.get(url, { params: { ...params, api_key: API_KEY } });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching data from ${url}:`, error);\n    throw new Error('Failed to fetch data');\n  }\n};\n\nexport const useTrendingMovies = () => {\n  return fetchData('trending/movie/day');\n};\n\nexport const useSearchMovies = (query) => {\n  return fetchData('search/movie', { params: { query } });\n};\n\nexport const useMovieDetails = (id) => {\n  return fetchData(`movie/${id}`);\n};\n\nexport const useMovieCredits = (id) => {\n  return fetchData(`movie/${id}/credits`);\n};\n\nexport const useMovieReviews = (id) => {\n  return fetchData(`movie/${id}/reviews`);\n};\n"],"names":["MovieDetails","_location$state$from","_location$state","details","setDetails","useState","id","useParams","from","useLocation","state","useEffect","async","results","fetchData","concat","error","console","fetchMovieDetails","title","poster_path","release_date","vote_average","overview","genres","releaseYear","slice","score","isNaN","Math","round","_jsxs","children","_jsx","type","Link","to","src","alt","map","genre","name","join","Suspense","fallback","Outlet","axios","url","params","api_key","data","Error"],"sourceRoot":""}