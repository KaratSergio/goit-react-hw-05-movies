{"version":3,"file":"static/js/779.de9cb6c7.chunk.js","mappings":"gPAEO,MAAMA,EAAOC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oIAOjBC,EAAYH,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,oJAQtBG,EAAaL,EAAAA,GAAAA,EAAQM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,2EAMrBK,EAASP,EAAAA,GAAAA,EAAQQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,+EAMjBO,EAAYT,EAAAA,GAAAA,EAAQU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,6F,aCrB1B,MAAMS,EAAUA,KACrB,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KACjC,GAAEC,IAAOC,EAAAA,EAAAA,MAmBf,OAjBAC,EAAAA,EAAAA,YAAU,KACkBC,WACxB,IACE,MAAMC,QAAiBC,EAAAA,GAAc,SAADC,OAAUN,EAAE,aAC1CO,EACJH,EAASI,SAAWC,MAAMC,QAAQN,EAASI,SACvCJ,EAASI,QACT,GACNV,EAAWS,EAGb,CAFE,MAAOI,GACPC,EAAAA,GAAAA,MAAY,yCACd,GAGFC,EAAmB,GAClB,CAACb,IAECS,MAAMC,QAAQb,IAA+B,IAAnBA,EAAQiB,QASrCC,EAAAA,EAAAA,KAAC/B,EAAI,CAAAgC,UACHD,EAAAA,EAAAA,KAAA,OAAAC,SACGnB,EAAQoB,KAAIC,IAAA,IAAC,OAAEC,EAAM,QAAEC,EAAO,GAAEpB,GAAIkB,EAAA,OACnCG,EAAAA,EAAAA,MAAA,OAAAL,SAAA,EACED,EAAAA,EAAAA,KAAC3B,EAAS,CAAA4B,UACRK,EAAAA,EAAAA,MAAC/B,EAAU,CAAA0B,SAAA,CAAC,WAASG,QAEvBJ,EAAAA,EAAAA,KAACvB,EAAM,CAAAwB,SAAEI,MAJDpB,EAKJ,SAfVe,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAACrB,EAAS,CAAAsB,SAAC,+BAiBR,EAcX,G,kCC7DA,MAAMM,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAYxB,MAAOyB,EAAKH,KACnC,IAEE,aADuBH,EAASO,IAAID,EAAK,CAAEH,YAC3BK,IAIlB,CAHE,MAAOnB,GAEP,MADAoB,QAAQpB,MAAM,4BAADL,OAA6BsB,EAAG,KAAKjB,GAC5C,IAAIqB,MAAM,uBAClB,E","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/http-requests.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Main = styled.div`\n  margin-top: 36px;\n  padding: 10px 20px 20px;\n  background-color: #74b6c5;\n  box-shadow: 0 0 14px rgb(80, 123, 176);\n`;\n\nexport const AuthorBox = styled.div`\n  width: max-content;\n  border: 1px solid #9fd3de;\n  background-color: #9fd3de;\n  border-top-right-radius: 10px;\n  margin-top: 10px;\n`;\n\nexport const AuthorName = styled.p`\n  color: #114e79;\n  font-weight: 600;\n  padding: 10px 10px 0;\n`;\n\nexport const Commit = styled.p`\n  padding: 15px;\n  background-color: #9fd3de;\n  line-height: 1.4;\n`;\n\nexport const ErrorText = styled.p`\n  color: #74b6c5;\n  font-size: 34px;\n  margin-top: 20px;\n  text-align: center;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-hot-toast';\nimport * as API from '../../services/http-requests';\n\nimport { Main, AuthorBox, AuthorName, Commit, ErrorText } from './Reviews.styled'\n\nexport const Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        const response = await API.fetchData(`movie/${id}/reviews`);\n        const reviewsArray =\n          response.results && Array.isArray(response.results)\n            ? response.results\n            : [];\n        setReviews(reviewsArray);\n      } catch (error) {\n        toast.error('Something went wrong, please try again');\n      }\n    };\n\n    fetchMovieReviews();\n  }, [id]);\n\n  if (!Array.isArray(reviews) || reviews.length === 0) {\n    return (\n      <div>\n        <ErrorText>No reviews for this movie</ErrorText>\n      </div>\n    );\n  }\n\n  return (\n    <Main>\n      <div>\n        {reviews.map(({ author, content, id }) => (\n          <div key={id}>\n            <AuthorBox>\n              <AuthorName>Author: {author}</AuthorName>\n            </AuthorBox>\n            <Commit>{content}</Commit>\n          </div>\n        ))}\n      </div>\n    </Main>\n  );\n};\n\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '6167a2fbe619d64566c427d4bc6ed1cb',\n  },\n});\n\nexport const fetchData = async (url, params) => {\n  try {\n    const response = await instance.get(url, { params });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching data from ${url}:`, error);\n    throw new Error('Failed to fetch data');\n  }\n};\n\nexport const useTrendingMovies = () => {\n  return fetchData('trending/movie/day');\n};\n\nexport const useSearchMovies = query => {\n  return fetchData('search/movie', { query });\n};\n\nexport const useMovieDetails = id => {\n  return fetchData(`movie/${id}`);\n};\n\nexport const useMovieCredits = id => {\n  return fetchData(`movie/${id}/credits`);\n};\n\nexport const useMovieReviews = id => {\n  return fetchData(`movie/${id}/reviews`);\n};\n"],"names":["Main","styled","_templateObject","_taggedTemplateLiteral","AuthorBox","_templateObject2","AuthorName","_templateObject3","Commit","_templateObject4","ErrorText","_templateObject5","Reviews","reviews","setReviews","useState","id","useParams","useEffect","async","response","API","concat","reviewsArray","results","Array","isArray","error","toast","fetchMovieReviews","length","_jsx","children","map","_ref","author","content","_jsxs","instance","axios","baseURL","params","api_key","fetchData","url","get","data","console","Error"],"sourceRoot":""}