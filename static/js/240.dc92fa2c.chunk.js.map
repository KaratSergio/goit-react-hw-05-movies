{"version":3,"file":"static/js/240.dc92fa2c.chunk.js","mappings":"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","sources":["components/RatingBar/RatingBar.styled.js","components/RatingBar/RatingBar.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx","services/http-requests.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const RatingText = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-448%, -220%);\n  color: #114e79;\n  font-weight: bold;\n`;\n\nexport const Accent = styled.span`\n  text-transform: uppercase;\n  padding: 3px;\n  border-radius: 8px;\n`;\n\nexport const Score = styled.span`\n  margin-left: 10px;\n  font-weight: 600;\n`;\n\nexport const StarContainer = styled.div`\nposition: relative;\n  display: flex;\n`;\n\nexport const StarIcon = styled.span`\n  display: inline-block;\n`;\n\nexport const SvgIcon = styled.svg`\n  width: 40px;\n  height: 40px;\n  fill: ${(props) => props.starColor || 'transparent'};\n`;\n","import * as Styled from './RatingBar.styled';\n\nconst RatingBar = ({ score }) => {\n  const stars = [];\n\n  for (let index = 1; index <= 10; index++) {\n    const fillPercentage = (score / 100) * 100;\n    const starsToShow = Math.round(fillPercentage / 10);\n    const starColor =\n      index <= starsToShow\n        ? '#d1cb21;'\n        : index - 1 < starsToShow\n        ? `linear-gradient(to right, #74b6c5 ${\n            fillPercentage - (index - 1) * 10\n          }%, transparent ${fillPercentage - (index - 1) * 10}%)`\n        : 'transparent';\n\n    stars.push(\n      <Styled.StarIcon key={index}>\n        <Styled.SvgIcon\n          viewBox=\"0 0 24 24\"\n          starColor={starColor}\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path d=\"M12 2l2.4 6.6h6.6l-5.4 4.8 2.4 6.6-6-4.8-6 4.8 2.4-6.6-5.4-4.8h6.6l2.4-6.6z\" />\n          <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        </Styled.SvgIcon>\n      </Styled.StarIcon>\n    );\n  }\n\n  return (\n    <Styled.StarContainer>\n      <Styled.RatingText>\n        <Styled.Accent>rating</Styled.Accent>\n        <Styled.Score>{score}%</Styled.Score>\n      </Styled.RatingText>\n      {stars}\n    </Styled.StarContainer>\n  );\n};\n\nexport default RatingBar;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport BeatLoader from 'react-spinners/BeatLoader';\n\nexport const BackBtn = styled(Link)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(to bottom, #74b6c5, #114e79);\n  margin: 0;\n  font-weight: 600;\n  width: 100px;\n  height: 30px;\n  border-top-right-radius: 10px;\n  border: 2px solid #114e79;\n  border-bottom: none;\n  box-shadow: 0 5px 3px rgb(80, 123, 176);\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    background: linear-gradient(to bottom, #114e79, #74b6c5);\n  }\n`;\n\nexport const Wrapper = styled.main`\n  background: radial-gradient(circle at center, #114e79, #011);\n  box-shadow: 0 0 14px rgb(80, 123, 176);\n  padding: 16px 32px;\n  display: block;\n  min-height: 100vh;\n  margin: 0px;\n`;\n\nexport const DetailsContainer = styled.div`\n  display: flex;\n  padding: 48px 240px;\n  flex-grow: 1;\n  justify-content: center;\n  background: radial-gradient(circle at center, #114e79, #011);\n  box-shadow: 0 0 14px rgb(80, 123, 176);\n`;\n\nexport const Poster = styled.img`\n  border-radius: 10px;\n  width: 350px;\n  height: auto;\n`;\n\nexport const MovieInfo = styled.div`\n  display: block;\n  margin-left: 56px;\n`;\n\nexport const Title = styled.h2`\n  font-size: 56px;\n  line-height: 1;\n  margin-bottom: 32px;\n  color: #74b6c5;\n`;\n\nexport const SubTitle = styled.h3`\n  font-size: 24px;\n  margin: 16px 0;\n  color: #74b6c5;\n`;\n\nexport const TextContent = styled.p`\n  text-shadow: 1px 1px 1px rgb(24, 25, 25);\n  font-size: 21px;\n  line-height: 1.5;\n`;\n\nexport const InfoList = styled.ul`\n  display: flex;\n  gap: 15px;\n`;\n\nexport const InfoItem = styled.li`\n  width: 80px;\n  text-align: center;\n  border: 1px solid #301934;\n  padding: 3px;\n  border-radius: 10px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    font-weight 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover {\n    border: none;\n    color: #74b6c5;\n    font-weight: 900;\n  }\n`;\n\nexport const InfoLink = styled(Link)`\n  color: #301934;\n  font-weight: 500;\n\n  :hover {\n    font-weight: 900;\n    color: #301934;\n  }\n`;\n\nexport const Loader = styled(BeatLoader)`\n  margin: 50vh;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  size: 150px;\n`;\n","import { useEffect, useState, Suspense } from 'react';\nimport { useLocation, useParams, Outlet } from 'react-router-dom';\nimport { fetchData } from '../../services/http-requests';\nimport RatingBar from '../../components/RatingBar/RatingBar';\n\nimport * as Styled from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const [details, setDetails] = useState(null);\n  const { id } = useParams();\n  const location = useLocation();\n  const from = location.state?.from || '/';\n  const baseURL = 'https://image.tmdb.org/t/p/w400';\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const results = await fetchData(`movie/${id}`);\n        setDetails(results);\n      } catch (error) {\n        console.error('Something went wrong, please try again', error);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [id]);\n\n  if (!details) return null;\n\n  const { title, poster_path, release_date, vote_average, overview, genres } =\n    details;\n  const releaseYear = (release_date || '').slice(0, 4);\n  const score = !isNaN(vote_average) ? Math.round(vote_average * 10) : 0;\n\n  return (\n    <Styled.Wrapper>\n      <Styled.BackBtn to={from}>Go back</Styled.BackBtn>\n      <Styled.DetailsContainer>\n        <Styled.Poster\n          src={poster_path && `${baseURL}${poster_path}`}\n          alt={title}\n        />\n        <Styled.MovieInfo>\n          <Styled.Title>\n            {title} ({releaseYear})\n          </Styled.Title>\n          <RatingBar score={score} />{' '}\n          <Styled.SubTitle>Overview</Styled.SubTitle>\n          <Styled.TextContent>{overview}</Styled.TextContent>\n          <Styled.SubTitle>Genres</Styled.SubTitle>\n          <Styled.TextContent>\n            {genres && genres.map(genre => genre.name).join(', ')}\n          </Styled.TextContent>\n          <Styled.SubTitle>Additional Information</Styled.SubTitle>\n          <Styled.InfoList>\n            <Styled.InfoItem>\n              <Styled.InfoLink to=\"cast\" state={{ from }}>\n                Cast\n              </Styled.InfoLink>\n            </Styled.InfoItem>\n            <Styled.InfoItem>\n              <Styled.InfoLink to=\"reviews\" state={{ from }}>\n                Reviews\n              </Styled.InfoLink>\n            </Styled.InfoItem>\n          </Styled.InfoList>\n        </Styled.MovieInfo>\n      </Styled.DetailsContainer>\n      <Suspense\n        color={'#301934'}\n        loading={true}\n        fallback={\n          <Styled.Loader aria-label=\"Loading Spinner\" data-testid=\"loader\" />\n        }\n      >\n        <Outlet />\n      </Suspense>\n    </Styled.Wrapper>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '6167a2fbe619d64566c427d4bc6ed1cb';\n\nexport const fetchData = async (url, params) => {\n  try {\n    const response = await axios.get(url, { params: { ...params, api_key: API_KEY } });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching data from ${url}:`, error);\n    throw new Error('Failed to fetch data');\n  }\n};\n\nexport const useTrendingMovies = () => {\n  return fetchData('trending/movie/day');\n};\n\nexport const useSearchMovies = (query) => {\n  return fetchData('search/movie', { params: { query } });\n};\n\nexport const useMovieDetails = (id) => {\n  return fetchData(`movie/${id}`);\n};\n\nexport const useMovieCredits = (id) => {\n  return fetchData(`movie/${id}/credits`);\n};\n\nexport const useMovieReviews = (id) => {\n  return fetchData(`movie/${id}/reviews`);\n};\n"],"names":["RatingText","styled","_templateObject","_taggedTemplateLiteral","Accent","_templateObject2","Score","_templateObject3","StarContainer","_templateObject4","StarIcon","_templateObject5","SvgIcon","_templateObject6","props","starColor","_ref","score","stars","index","fillPercentage","starsToShow","Math","round","concat","push","_jsx","Styled","children","_jsxs","viewBox","xmlns","d","fill","BackBtn","Link","Wrapper","DetailsContainer","Poster","MovieInfo","Title","SubTitle","_templateObject7","TextContent","_templateObject8","InfoList","_templateObject9","InfoItem","_templateObject10","InfoLink","_templateObject11","Loader","BeatLoader","_templateObject12","MovieDetails","_location$state","details","setDetails","useState","id","useParams","from","useLocation","state","useEffect","async","results","fetchData","error","console","fetchMovieDetails","title","poster_path","release_date","vote_average","overview","genres","releaseYear","slice","isNaN","to","src","alt","RatingBar","map","genre","name","join","Suspense","color","loading","fallback","Outlet","axios","url","params","api_key","data","Error"],"sourceRoot":""}